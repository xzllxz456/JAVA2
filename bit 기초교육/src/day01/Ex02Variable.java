package day01;
// 변수
// 변수란, 해당 공간의 값이 바뀔 수 있는 공간을 변수라고 한다.
// 변수는 선언과 초기화로 이루어진다.
// 선언: 해당 변수가 어떤 종류의 값을 가질 수 있고 그 변수의 이름이 무엇인가
//      변수는 선언될때 규정된 종류의 값만 받아들일 수 있다.
//      이것을 우리는 변수의 자료형(=데이터타입) 이라고 한다.
//      데이터타입은 크게 2가지로 나뉜다.
//      1. 기본형 (Primitive Type)
//         기본형 데이터타입의 경우, 값을 2진법으로 변환해서 
//         해당 공간에 저장한다.
//         기본형 데이터타입에는 다음과 같은 데이터타입이 존재한다.
//         정수형: byte short int long
//                byte: 8비트 (-2^7부터 2^7-1까지)
//                short: 16비트 (-2^15부터 2^15-1까지)
//                int: 32비트 (-2^31부터 2^31-1까지)
//                long: 64비트 (-2^63부터 2^63-1까지)
//         실수형: float double
//                float: 32비트
//                double: 64비트
//         문자형: char
//               char: 7비트
//         논리형: boolean
//               boolean: 1비트
//      2. 참조형 (Reference Type)
//         참조형 데이터타입의 경우, 주소값을 가지고 있고
//         그 값을 참조해서 실제 값이 들어가 있는 곳을 찾아가야
//         진짜 값을 볼 수 있다.
//         참조형에는 다음과 같은 종류가 존재한다.
//         클래스형
//         인터페이스형
//         배열형
// 비트: 비트란 2진법 자리 하나를 비트라고 한다.
//      8비트의 경우 8자리 2진법 숫자를 뜻한다.

// 초기화: 해당 변수에 값을 처음 넣는 과정
public class Ex02Variable {
	public static void main(String[] args) {
		//변수를 선언해보자
		//변수를 선언할 때에는
		//데이터타입 변수이름 으로 선언할 수있다.
		byte myByte;
		//변수를 초기화해보자
		//초기화할 때에는 할당연산자 = 을 써서 초기화하면 된다.
		//변수이름 = 값;
		myByte = 30;
		
		//이제 우리가 해당 변수이름을 호출하면 그 공간에 저장되어있는 값이
		//불러와진다.
		System.out.println("myByte의 현재값: "+myByte);
		
		//변수를 선언한 후에는 우리가 할당연산자를 써서 우리가 원하는 값으로
		//값을 바꿔줄 수 있다.
		myByte = 20;
		System.out.println("myByte의 현재값: "+myByte);
		
		//하지만 해당 데이터타입의 표현 가능한 범위를 벗어나게 되면
		//오류가 난다.
		//만약 표현 최대값을 벗어나는 경우에는 오버플로우(overflow)라는 오류가 난다.
		//만약 표현 최솟값을 벗어나는 경우에는 언더플로우(underflow)라는 오류가 난다.
		//왜냐하면 2진법 가장 큰 자릿수(=가장 왼쪽)는 0이면 +, 1이면 -이기 때문이다!
		
		//byte를 기준으로 해서
		//가장 큰 숫자는 0111 1111(=127)이다.
		//가장 작은 숫자는 1000 0000(=-128)이다.
		
		//그렇다면 127+1을 하게 되면
		//어떻게 될까?
		myByte = 127;
		System.out.println("myByte의 현재값: "+myByte);
		
		myByte = (byte)(127+1);
		System.out.println("myByte의 현재값: "+myByte);
		
		//그렇다면 -128 - 1을 하게 되면
		//어떻게 될까?
		myByte = -128;
		System.out.println("myByte의 현재값: "+myByte);
		
		myByte = (byte)(-128-1);
		System.out.println("myByte의 현재값: "+myByte);
	}
}


















